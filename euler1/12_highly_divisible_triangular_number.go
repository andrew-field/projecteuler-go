/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

package euler1

import (
	"github.com/andrew-field/maths/v2"
)

// highlyDivisibleTriangularNumber returns the value of the first triangle number to have over |n| divisors.
func highlyDivisibleTriangularNumber(n int) int {
	n, err := maths.Abs(n)
	if err != nil {
		panic(err)
	}

	// Each triangular number.
	triangularNumber := 0

	// Calculate the number of divisors and see if it is greater than |n|.
	sequenceStep := 1
	for numberOfDivisors := 0; numberOfDivisors < n; sequenceStep++ {
		triangularNumber += sequenceStep
		numberOfDivisors = maths.NumberOfDivisorsBruteForce(triangularNumber)
	}

	return triangularNumber
}
