/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

package euler1

import "math"

// evenFibonacciNumbers sums all the even fibonacci numbers below x.
func evenFibonacciNumbers(x int) int {
	total := 0.0

	// The even fibonacci numbers are every third Fibonacci number in the sequence.
	for i := 3.0; ; i += 3 {
		f := math.Round(math.Pow(math.Phi, i) / math.Sqrt(5)) // Fn = round(Phi^n / sqrt(5)).
		if f >= float64(x) {
			break
		}
		total += f
	}

	return int(total)
}

// evenFibonacciNumbers sums all the even fibonacci numbers below x.
func evenFibonacciNumbers2(x int) int {
	total := 0

	// Fibonacci numbers 2 and 3.
	num1, num2 := 1, 2

	// Generate Fibonacci sequence for numbers less than x.
	for num2 < x {
		total += num2
		// Only add even values so calculate three terms before adding.
		for range 3 {
			num1, num2 = num2, num1+num2
		}
	}

	return total
}

// The Fibonacci numbers are on a cycle explained below.

//  1. odd + even = odd. --> 2.
//  2. even + odd = odd. --> 3.
//  3. odd + odd = even. --> back to 1.

// Hence you only need to sum up every third Fibonacci number for the even numbers.
